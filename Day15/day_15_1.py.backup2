import re

with open("./input_15.txt", "r") as file:
    puzzle_input = file.read().splitlines()

def manhattan_dist(point1, point2):
    distx = abs(point1[0] - point2[0])
    disty = abs(point1[1] - point2[1])
    return distx + disty

sensors_pos = []
beacons_pos = []

for puzzle_line in puzzle_input:
    xvals = re.findall("x=([\-\d]+)", puzzle_line)
    yvals = re.findall("y=([\-\d]+)", puzzle_line)

    curr_sensor_pos = [int(xvals[0]), int(yvals[0])]
    curr_beacon_pos = [int(xvals[1]), int(yvals[1])]
    
    sensors_pos.append(curr_sensor_pos)
    beacons_pos.append(curr_beacon_pos)

sensors_xvals, sensors_yvals = list(zip(*sensors_pos))
beacons_xvals, beacons_yvals = list(zip(*beacons_pos))

minxval = min(sensors_xvals + beacons_xvals)
minyval = min(sensors_yvals + beacons_yvals)

maxxval = max(sensors_xvals + beacons_xvals)
maxyval = max(sensors_yvals + beacons_yvals)

curry = 2_000_000
num_clear = 0

# print(sensors_pos)
# print("\n\n\n")
# print(beacons_pos)
# print("\n\n\n")
# print(minxval, maxxval)
# print("\n\n\n")
# print(minyval, maxyval)


for currx in range(minxval-9999999,maxxval+1+9999999):
    curr_pos = (currx, curry)
    for curr_sensor, curr_beacon in zip(sensors_pos, beacons_pos):
        if manhattan_dist(curr_pos, curr_sensor) < manhattan_dist(curr_beacon, curr_sensor):
            num_clear += 1
            break

print(num_clear)


